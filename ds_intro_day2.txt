Jupyter Notebooks

Python is a live interpreter, like a very advanced calculator

Bash is a special language for terminal
  cd, ls, etc are like little routines or modules

Terminal
ctrl-a (moves you to front of line)
ctrl-e (moves you to end of the line)

GIT
git clone <url or repository>
git status
git pull

git add
git commit -m "i fixed things"
git push



escape -- then :wq

escape --then :qs
(to save)

or (dont want to save changes)
escape -- then :wq!

up arrow in bash, lets you see your previous commands

man --manual command

ex man less


ipython
4.2

can code here

and if say
 run script.py
will run script right in the shell


cd ~
  will take you home

mv
move/changing the name of the file

jupyter notebook

control C will exit Jupyter Notebook (kill the running on the terminal)

can also start a
    jupyter notebook <name of file.ipynb> &
will run in the background,
but as soon as you do something in it, it will print out, so hacky

if you put a program in the background (&), and then want to bring it back to the front you use..
type in
  fg

Jupyter Notebook
ctrl enter (runs the program you typed in)

In a Jupyter notebook, the very last thing gets printed out automatically, but only the last one

so print command works too

code order matters

Jupyter notes were to make reproducibility better, can add cells with markdown explain
what's going on

But on the micro level makes it much more difficult to track what's going on,
can jump around and add run different cells, so get confusing on order

PYTHON
single quotes and double quotes don't matter
python allows dynamic variables


another way to run scripts
ipython
then
run script.py

back to drews-jupyter_nb.ipynb

type ("my string")
-str

type (8)
-int

type (9.0)
float

force to be an integer-- int(9.0)
int()

complex(2,3)+complex(1,1)
(3+4j)
  -did element wise addition of real then imaginary parts of the number

FLOAT
5 + 7.3
12.3
float will take dominance


2./3.
0.6666666666666666

2/3
0 (b/c integer, only give you the integer, 3 goes into 2, 0 times)

4/3
1

modolus operator %
2%3
2 (remainder after the whole times it goes into the integer)

//
  Floor division
   (tells you the number of whole times something goes into something else)
  13.//11.

Exponent **
  2**3
  8

Variable Assignment

x=5+1

x+=6
x
12

y = x + 6
x = y
x
12

+= is the same as doing the above assigning of variables but faster

True
True

False
False


type(True)
bool --boolean

type(False)
bool

==
equality check, does x equal 5 x==5
currently false in our program (depends on how program lines were run in jupyter notebook)

!=
  #means not equal

if x == 12:
    print "yay! x IS 12!!"
^ must have the indent!! otherwise:

if x == 12:
print "yay! x IS 12!!"
  File "<ipython-input-69-91ec0e4352ab>", line 2
    print "yay! x IS 12!!"
        ^
IndentationError: expected an indented block

!= ##not equal

/bin/sh: =: command not found

# int

raw_input("give me something!")

x = raw_input("give me something!")

give me something!that's awesome

if 1==2:

   print "the world is easy"

elif 2==3:
   pass
elif 3==4:
   pass
else:
   print "this is really silly"
this is really silly

if 1==2:

   print "the world is easy"

elif 2==3:
   pass
elif 3==4:
  pass

if 1==2:
   print "the world is easy"
elif 2==3:
   #why you need to add pass or something real, because the errors below happen
elif 3==4:
  File "<ipython-input-7-5f72a5892d51>", line 5
   elif 3==4:
      ^
IndentationError: expected an indented block
